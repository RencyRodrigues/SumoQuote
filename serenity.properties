

s#it is the name in your HTML report
serenity.project.name=SumoQuote Automation


#The urls will be picked up from serenity.conf based on the env mentioned here
environment=Development

# this will be the default url to open if not specified and using open() method
webdriver.base.url = "https://sumoquoteweb-qa.azurewebsites.net/new-account"
#webdriver.base.url = "https://amazon.ca/"

appUrl234234 = "https://www.google.com/" 

#default browser is chrome, if need to execute in any other browser, can enable this
webdriver.driver= chrome
Webdriver.autodownload = true
#driver.windows.webdriver.chrome.driver = src/test/resources/drivers/chromedriver.exe
#driver.windows.webdriver.gecko.driver = src/test/resources/drivers/geckodriver.exe
chrome_experimental_options.useAutomationExtension = false
chrome.switches = -disable-extensions,--start-maximized,--disable-infobars,--ignore-certificate-errors

serenity.take.screenshots = AFTER_EACH_STEP
#serenity.requirement.types = Epic, capability, feature, story
serenity.report.show.releases = true

restart.browser.each.scenario = true

serenity.outputDirectory = reports/Test1

#Set this property to have full page screenshot support.
serenity.full.page.screenshot.strategy = true
step.creation.strategy = legacy

# test result tables will display a breakdown of the steps by result
serenity.reports.show.step.details = true
serenity.tag.failures = true


serenity.requiremements.dir = src/test/resources/features


webdriver.driver.manage().timeouts.implicitlyWait(10000, TimeUnit.SECONDS)

#How long should the driver wait for elements not immediately visible, in milliseconds.
serenity.timeout = 120000


#specifies the default amount of time in seconds that Selenium will wait for an element 
webdriver.timeouts.implicitlywait = 30000

#specifies the maximum amount of time in milliseconds that Selenium 
#should wait for an element to become visible, clickable, or enabled.
webdriver.wait.for.timeout = 60000

#specifies whether Selenium should wait for a page to finish loading before interacting with it. 
#If set to true, Selenium will wait for the onload event to fire before proceeding.
webdriver.wait_for_page_to_load = true

#specifies the interval in milliseconds that Selenium 
#should use to check for the presence of an element.
webdriver.wait_for_polling_interval = 500



#Set this property to have full page screenshot support.
serenity.full.page.screenshot.strategy = true
step.creation.strategy = legacy

# test result tables will display a breakdown of the steps by result
serenity.reports.show.step.details = true
serenity.tag.failures = true


serenity.requiremements.dir = src/test/resources/features


webdriver.driver.manage().timeouts.implicitlyWait(10000, TimeUnit.SECONDS)

#How long should the driver wait for elements not immediately visible, in milliseconds.
serenity.timeout = 120000


#specifies the default amount of time in seconds that Selenium will wait for an element 
webdriver.timeouts.implicitlywait = 30000

#specifies the maximum amount of time in milliseconds that Selenium 
#should wait for an element to become visible, clickable, or enabled.
webdriver.wait.for.timeout = 60000

#specifies whether Selenium should wait for a page to finish loading before interacting with it. 
#If set to true, Selenium will wait for the onload event to fire before proceeding.
webdriver.wait_for_page_to_load = true

#specifies the interval in milliseconds that Selenium 
#should use to check for the presence of an element.
webdriver.wait_for_polling_interval = 500

